/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/csma-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"
#include "ns3/ipv4-global-routing-helper.h"

// Default Network Topology
//
//     192.168.0.0      10.0.0.0      20.0.0.0      30.0.0.0       172.16.0.0
// n0 ============= n1 ---------- n2 ---------- n3 ---------- n4 ============= n5
//        casa            p2p1          p2p2          p2p3            claro
//                    
//

using namespace ns3;

NS_LOG_COMPONENT_DEFINE ("Trabalho-de-Simulacao");

int 
main (int argc, char *argv[])
{
  bool verbose = true;
  uint32_t nCsma1 = 2;
  uint32_t nCsma2 = 2;

  CommandLine cmd (__FILE__);
  cmd.AddValue ("nCsma", "Number of \"extra\" CSMA nodes/devices", nCsma1);
  cmd.AddValue ("nCsma", "Number of \"extra\" CSMA nodes/devices", nCsma2);
  cmd.AddValue ("verbose", "Tell echo applications to log if true", verbose);

  cmd.Parse (argc,argv);

  if (verbose)
    {
      LogComponentEnable ("UdpEchoClientApplication", LOG_LEVEL_INFO);
      LogComponentEnable ("UdpEchoServerApplication", LOG_LEVEL_INFO);
    }

  nCsma1 = nCsma1 == 0 ? 1 : nCsma1;
  nCsma2 = nCsma2 == 0 ? 1 : nCsma2;

/*----------------------------------------------------------------------------------*/

  NodeContainer p2pNodes1;
  p2pNodes1.Create (2);

  NodeContainer p2pNodes2;
  p2pNodes2.Create (2);

  NodeContainer p2pNodes3;
  p2pNodes3.Create (2);

  NodeContainer casaNodes;
  casaNodes.Add (p2pNodes1.Get (0));
  casaNodes.Create (nCsma1);

  NodeContainer claroNodes;
  claroNodes.Add (p2pNodes3.Get (1));
  claroNodes.Create (nCsma2);

  PointToPointHelper pointToPoint;
  pointToPoint.SetDeviceAttribute ("DataRate", StringValue ("10Mbps"));
  pointToPoint.SetChannelAttribute ("Delay", StringValue ("2ms"));

/*----------------------------------------------------------------------------------*/

  NetDeviceContainer p2pDevices1;
  p2pDevices1 = pointToPoint.Install (p2pNodes1);

  NetDeviceContainer p2pDevices2;
  p2pDevices2 = pointToPoint.Install (p2pNodes2);

  NetDeviceContainer p2pDevices3;
  p2pDevices3 = pointToPoint.Install (p2pNodes3);

  CsmaHelper casa;
  casa.SetChannelAttribute ("DataRate", StringValue ("100Mbps"));
  casa.SetChannelAttribute ("Delay", TimeValue (NanoSeconds (6560)));

  CsmaHelper claro;
  claro.SetChannelAttribute ("DataRate", StringValue ("100Mbps"));
  claro.SetChannelAttribute ("Delay", TimeValue (NanoSeconds (6560)));

  NetDeviceContainer csmaDevices1;
  csmaDevices1 = casa.Install (casaNodes);

  NetDeviceContainer csmaDevices2;
  csmaDevices2 = claro.Install (claroNodes);

  InternetStackHelper stack1;
  stack1.Install (p2pNodes1.Get (0));
  stack1.Install (casaNodes);

  InternetStackHelper stack2;
  stack2.Install (p2pNodes3.Get (1));
  stack2.Install (claroNodes);

  Ipv4AddressHelper address1;
  address1.SetBase ("10.0.0.0", "255.255.255.0");
  Ipv4InterfaceContainer p2pNodes1Interfaces;
  p2pNodes1Interfaces = address1.Assign (p2pDevices1);

  Ipv4AddressHelper address2;

  address2.SetBase ("20.0.0.0", "255.255.255.0");
  Ipv4InterfaceContainer p2pNodes2Interfaces;
  p2pNodes2Interfaces = address2.Assign (p2pDevices2);

  Ipv4AddressHelper address3;

  address3.SetBase ("30.0.0.0", "255.255.255.0");
  Ipv4InterfaceContainer p2pNodes3Interfaces;
  p2pNodes3Interfaces = address3.Assign (p2pDevices3);

  Ipv4AddressHelper address4;

  address4.SetBase ("192.168.0.0", "255.255.255.0");
  Ipv4InterfaceContainer casaInterfaces;
  casaInterfaces = address4.Assign (csmaDevices1);

  Ipv4AddressHelper address5;

  address5.SetBase ("192.168.0.0", "255.255.255.0");
  Ipv4InterfaceContainer claroInterfaces;
  claroInterfaces = address5.Assign (csmaDevices2);

  UdpEchoServerHelper echoServer (9);

  ApplicationContainer serverApps = echoServer.Install (claroNodes.Get (nCsma2 - 1));
  serverApps.Start (Seconds (1.0));
  serverApps.Stop (Seconds (60.0));

  UdpEchoClientHelper echoClient (casaInterfaces.GetAddress (nCsma1 - 0), 9);
  echoClient.SetAttribute ("MaxPackets", UintegerValue (1));
  echoClient.SetAttribute ("Interval", TimeValue (Seconds (0.5)));
  echoClient.SetAttribute ("PacketSize", UintegerValue (512));

  ApplicationContainer clientApps = echoClient.Install (p2pNodes1.Get (0));
  clientApps.Start (Seconds (5.0));
  clientApps.Stop (Seconds (55.0));

  Ipv4GlobalRoutingHelper::PopulateRoutingTables ();

  Simulator::Stop (Seconds (60.0));

  pointToPoint.EnablePcapAll ("BC");
  //p2p.EnablePcap ("BC", p2pDevices.Get (1), true);


  Simulator::Run ();
  Simulator::Destroy ();
  return 0;
}
