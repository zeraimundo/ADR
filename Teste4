/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/csma-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"
#include "ns3/ipv4-global-routing-helper.h"

// Default Network Topology
//
//     192.168.0.0      10.0.0.0      20.0.0.0      30.0.0.0       172.16.0.0
// n0 ============= n1 ---------- n2 ---------- n3 ---------- n4 ============= n5
//        casa            p2p1          p2p2          p2p3            claro
//                    
//

using namespace ns3;

NS_LOG_COMPONENT_DEFINE ("Trabalho-de-Simulacao");

int 
main (int argc, char *argv[])
{
  bool verbose = true;
  uint32_t nCsma1 = 2;
  uint32_t nCsma2 = 2;

  CommandLine cmd (__FILE__);
  cmd.AddValue ("nCsma", "Number of \"extra\" CSMA nodes/devices", nCsma1);
  cmd.AddValue ("nCsma", "Number of \"extra\" CSMA nodes/devices", nCsma2);
  cmd.AddValue ("verbose", "Tell echo applications to log if true", verbose);

  cmd.Parse (argc,argv);

  if (verbose)
    {
      LogComponentEnable ("UdpEchoClientApplication", LOG_LEVEL_INFO);
      LogComponentEnable ("UdpEchoServerApplication", LOG_LEVEL_INFO);
    }

  nCsma1 = nCsma1 == 0 ? 1 : nCsma1;
  nCsma2 = nCsma2 == 0 ? 1 : nCsma2;


  Ptr<Node> casa  = CreateObject<Node> ();
  Ptr<Node> RA  = CreateObject<Node> ();
  Ptr<Node> RB  = CreateObject<Node> ();
  Ptr<Node> RC  = CreateObject<Node> ();
  Ptr<Node> RD  = CreateObject<Node> ();
  Ptr<Node> claro  = CreateObject<Node> ();
  

  Names::Add ("casa",  casa);
  Names::Add ("RA",  RA);
  Names::Add ("RB",  RB);
  Names::Add ("RC",  RC);
  Names::Add ("RD",  RD);
  Names::Add ("claro",  claro);

  CsmaHelper csma;
  csma.SetChannelAttribute ("DataRate", StringValue ("100Mbps"));
  csma.SetChannelAttribute ("Delay", TimeValue (NanoSeconds (6560)));

  PointToPointHelper p2p;
  p2p.SetDeviceAttribute ("DataRate", StringValue ("10Mbps"));
  p2p.SetChannelAttribute ("Delay", StringValue ("2ms"));


  NetDeviceContainer link_casa_RA   = csma.Install (NodeContainer (casa,  RA));
  NetDeviceContainer link_RA_RB   = p2p.Install (NodeContainer (RA,  RB));
  NetDeviceContainer link_RB_RC   = p2p.Install (NodeContainer (RB,  RC));
  NetDeviceContainer link_RC_RD   = p2p.Install (NodeContainer (RC,  RD));
  NetDeviceContainer link_RD_claro   = csma.Install (NodeContainer (RD,  claro));

  NetDeviceContainer casaIpDevices;
  casaIpDevices.Add (link_casa_RA.Get (1));
  Ipv4AddressHelper ipv4casa;
  ipv4casa.SetBase ("192.168.1.0", "255.255.255.0");
  ipv4casa.Assign (casaIpDevices);

  NetDeviceContainer RA_RB;
  RA_RB.Add (link_RA_RB.Get (1));
  RA_RB.Add (link_RB_RC.Get (0));
  Ipv4AddressHelper ipra_rb;
  ipra_rb.SetBase ("10.0.1.0", "255.255.255.0");
  ipra_rb.Assign (RA_RB);

  NetDeviceContainer RB_RC;
  RB_RC.Add (link_RB_RC.Get (1));
  RB_RC.Add (link_RC_RD.Get (0));
  Ipv4AddressHelper iprb_rc;
  ipra_rb.SetBase ("10.0.2.0", "255.255.255.0");
  ipra_rb.Assign (RB_RC);

  NetDeviceContainer RC_RD;
  RC_RD.Add (link_RC_RD.Get (1));
  RC_RD.Add (link_RD_claro.Get (0));
  Ipv4AddressHelper iprc_rd;
  ipra_rb.SetBase ("10.0.3.0", "255.255.255.0");
  ipra_rb.Assign (RC_RD);

  NetDeviceContainer claroIpDevices;
  claroIpDevices.Add (link_RD_claro.Get (1));
  Ipv4AddressHelper ipv4claro;
  ipv4claro.SetBase ("192.168.2.0", "255.255.255.0");
  ipv4claro.Assign (claroIpDevices);

  

  InternetStackHelper stack;
  NodeContainer routerNodes (RA, RB, RC, RD);
  stack.Install (routerNodes);


  UdpEchoServerHelper echoServer (9);

  ApplicationContainer serverApps = echoServer.Install (claroIpDevices.Get (1));
  serverApps.Start (Seconds (1.0));
  serverApps.Stop (Seconds (10.0));

  UdpEchoClientHelper echoClient (Ipv4Address ("192.168.2.2"), 9);
  echoClient.SetAttribute ("MaxPackets", UintegerValue (1));
  echoClient.SetAttribute ("Interval", TimeValue (Seconds (1.0)));
  echoClient.SetAttribute ("PacketSize", UintegerValue (1024));

  ApplicationContainer clientApps = echoClient.Install (casa);
  clientApps.Start (Seconds (2.0));
  clientApps.Stop (Seconds (10.0));

  Ipv4GlobalRoutingHelper::PopulateRoutingTables ();

  Simulator::Run ();
  Simulator::Destroy ();
  return 0;

}
