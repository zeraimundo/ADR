/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/csma-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"
#include "ns3/ipv4-global-routing-helper.h"

// Default Network Topology
//
//     192.168.0.0      10.1.1.0      10.1.2.0      10.1.3.0       172.16.0.0
// n0 ============= n1 ---------- n2 ---------- n3 ---------- n4 ============= n5
//        casa            p2p1          p2p2          p2p3            claro


using namespace ns3;

NS_LOG_COMPONENT_DEFINE ("SecondScriptExample");

int 
main (int argc, char *argv[])
{
  bool verbose = true;
  uint32_t nCsma1 = 2;
  uint32_t nCsma2 = 2;
  uint32_t RAB = 2;
  uint32_t RBC = 2;
  uint32_t RCD = 2;

  CommandLine cmd (__FILE__);
  cmd.AddValue ("nCsma", "Number of \"extra\" CSMA nodes/devices", nCsma1);
  cmd.AddValue ("nCsma", "Number of \"extra\" CSMA nodes/devices", nCsma2);
  cmd.AddValue ("verbose", "Tell echo applications to log if true", verbose);

  cmd.Parse (argc,argv);

  if (verbose)
    {
      LogComponentEnable ("UdpEchoClientApplication", LOG_LEVEL_INFO);
      LogComponentEnable ("UdpEchoServerApplication", LOG_LEVEL_INFO);
    }

  nCsma1 = nCsma1 == 0 ? 1 : nCsma1;
  nCsma2 = nCsma2 == 0 ? 1 : nCsma2;


  NodeContainer p2pNodes1;
  p2pNodes1.Create (2);

  NodeContainer p2pNodes2;
  p2pNodes2.Add (p2pNodes1.Get(1));
  p2pNodes2.Create (RAB);

  NodeContainer p2pNodes3;
  p2pNodes3.Add (p2pNodes2.Get(1));
  p2pNodes3.Create (RBC);

  NodeContainer p2pNodes4;
  p2pNodes4.Add (p2pNodes3.Get(1));
  p2pNodes4.Create (RCD);

  NodeContainer csmaCasa;
  csmaCasa.Add (p2pNodes1.Get (0));
  csmaCasa.Create (nCsma1);

  NodeContainer csmaClaro;
  csmaClaro.Add (p2pNodes4.Get (1));
  csmaClaro.Create (nCsma2);

  PointToPointHelper pointToPoint;
  pointToPoint.SetDeviceAttribute ("DataRate", StringValue ("10Mbps"));
  pointToPoint.SetChannelAttribute ("Delay", StringValue ("2ms"));

  /* NetDeviceContainer p2pDevices1;
  p2pDevices1 = pointToPoint.Install (p2pNodes1); */
  NetDeviceContainer p2pDevices2;
  p2pDevices2 = pointToPoint.Install (RAB);
  NetDeviceContainer p2pDevices3; 
  p2pDevices3 = pointToPoint.Install (RBC);
  NetDeviceContainer p2pDevices4; 
  p2pDevices4 = pointToPoint.Install (RCD);
  

  CsmaHelper csma;
  csma.SetChannelAttribute ("DataRate", StringValue ("100Mbps"));
  csma.SetChannelAttribute ("Delay", TimeValue (NanoSeconds (6560)));

  NetDeviceContainer csmaDevices1;
  csmaDevices1 = csma.Install (csmaCasa);
  NetDeviceContainer csmaDevices2;
  csmaDevices2 = csma.Install (csmaClaro);

/*  InternetStackHelper stack1;
  stack1.Install (p2pNodes1.Get (0));
  stack1.Install (csmaCasa);

  InternetStackHelper stack2;
  stack2.Install (p2pNodes3.Get (1));
  stack2.Install (csmaClaro);
*/

  InternetStackHelper stack;
  stack.Install (csmaCasa);
  stack.Install (RAB);
  stack.Install (RBC);
  stack.Install (RCD);
  stack.Install (csmaClaro);


  Ipv4AddressHelper address;
  address.SetBase ("10.1.1.0", "255.255.255.0");
  Ipv4InterfaceContainer p2pInterfaces1;
  p2pInterfaces1 = address.Assign (p2pDevices2);

  address.SetBase ("10.1.2.0", "255.255.255.0");
  Ipv4InterfaceContainer p2pInterfaces2;
  p2pInterfaces2 = address.Assign (p2pDevices3);

  address.SetBase ("10.1.3.0", "255.255.255.0");
  Ipv4InterfaceContainer p2pInterfaces3;
  p2pInterfaces3 = address.Assign (p2pDevices4);


  address.SetBase ("192.168.0.1", "255.255.255.0");
  Ipv4InterfaceContainer csmaInterfaces1;
  csmaInterfaces1 = address.Assign (csmaDevices1);

  address.SetBase ("172.16.0.1", "255.255.255.0");
  Ipv4InterfaceContainer csmaInterfaces2;
  csmaInterfaces2 = address.Assign (csmaDevices2);

  UdpEchoServerHelper echoServer (9);

  ApplicationContainer serverApps = echoServer.Install (csmaClaro.Get (nCsma2));
  serverApps.Start (Seconds (1.0));
  serverApps.Stop (Seconds (10.0));

  UdpEchoClientHelper echoClient (Ipv4Address ("192.168.0.1"), 9);
  echoClient.SetAttribute ("MaxPackets", UintegerValue (1));
  echoClient.SetAttribute ("Interval", TimeValue (Seconds (1.0)));
  echoClient.SetAttribute ("PacketSize", UintegerValue (1024));

  ApplicationContainer clientApps = echoClient.Install (csmaCasa.Get (0));
  clientApps.Start (Seconds (2.0));
  clientApps.Stop (Seconds (10.0));

  Ipv4GlobalRoutingHelper::PopulateRoutingTables ();

  //pointToPoint.EnablePcapAll ("second");
  //csma.EnablePcap ("second", csmaDevices.Get (1), true);

  Simulator::Run ();
  Simulator::Destroy ();
  return 0;
}
